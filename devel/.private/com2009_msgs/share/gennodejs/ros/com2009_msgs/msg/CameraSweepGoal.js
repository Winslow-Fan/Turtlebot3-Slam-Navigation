// Auto-generated. Do not edit!

// (in-package com2009_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class CameraSweepGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.sweep_angle = null;
      this.image_count = null;
    }
    else {
      if (initObj.hasOwnProperty('sweep_angle')) {
        this.sweep_angle = initObj.sweep_angle
      }
      else {
        this.sweep_angle = 0.0;
      }
      if (initObj.hasOwnProperty('image_count')) {
        this.image_count = initObj.image_count
      }
      else {
        this.image_count = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type CameraSweepGoal
    // Serialize message field [sweep_angle]
    bufferOffset = _serializer.float32(obj.sweep_angle, buffer, bufferOffset);
    // Serialize message field [image_count]
    bufferOffset = _serializer.int32(obj.image_count, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type CameraSweepGoal
    let len;
    let data = new CameraSweepGoal(null);
    // Deserialize message field [sweep_angle]
    data.sweep_angle = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [image_count]
    data.image_count = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 8;
  }

  static datatype() {
    // Returns string type for a message object
    return 'com2009_msgs/CameraSweepGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'b2278ec999c3591670076a420ec95a89';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal
    float32 sweep_angle    # the angular sweep over which to capture images (degrees)
    int32 image_count      # the number of images to capture during the sweep
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new CameraSweepGoal(null);
    if (msg.sweep_angle !== undefined) {
      resolved.sweep_angle = msg.sweep_angle;
    }
    else {
      resolved.sweep_angle = 0.0
    }

    if (msg.image_count !== undefined) {
      resolved.image_count = msg.image_count;
    }
    else {
      resolved.image_count = 0
    }

    return resolved;
    }
};

module.exports = CameraSweepGoal;
