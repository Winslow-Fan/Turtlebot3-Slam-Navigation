// Generated by gencpp from file com2009_msgs/SearchResult.msg
// DO NOT EDIT!


#ifndef COM2009_MSGS_MESSAGE_SEARCHRESULT_H
#define COM2009_MSGS_MESSAGE_SEARCHRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace com2009_msgs
{
template <class ContainerAllocator>
struct SearchResult_
{
  typedef SearchResult_<ContainerAllocator> Type;

  SearchResult_()
    : total_distance_travelled(0.0)
    , closest_object_distance(0.0)
    , closest_object_angle(0.0)  {
    }
  SearchResult_(const ContainerAllocator& _alloc)
    : total_distance_travelled(0.0)
    , closest_object_distance(0.0)
    , closest_object_angle(0.0)  {
  (void)_alloc;
    }



   typedef float _total_distance_travelled_type;
  _total_distance_travelled_type total_distance_travelled;

   typedef float _closest_object_distance_type;
  _closest_object_distance_type closest_object_distance;

   typedef float _closest_object_angle_type;
  _closest_object_angle_type closest_object_angle;





  typedef boost::shared_ptr< ::com2009_msgs::SearchResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::com2009_msgs::SearchResult_<ContainerAllocator> const> ConstPtr;

}; // struct SearchResult_

typedef ::com2009_msgs::SearchResult_<std::allocator<void> > SearchResult;

typedef boost::shared_ptr< ::com2009_msgs::SearchResult > SearchResultPtr;
typedef boost::shared_ptr< ::com2009_msgs::SearchResult const> SearchResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::com2009_msgs::SearchResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::com2009_msgs::SearchResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::com2009_msgs::SearchResult_<ContainerAllocator1> & lhs, const ::com2009_msgs::SearchResult_<ContainerAllocator2> & rhs)
{
  return lhs.total_distance_travelled == rhs.total_distance_travelled &&
    lhs.closest_object_distance == rhs.closest_object_distance &&
    lhs.closest_object_angle == rhs.closest_object_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::com2009_msgs::SearchResult_<ContainerAllocator1> & lhs, const ::com2009_msgs::SearchResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace com2009_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::com2009_msgs::SearchResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com2009_msgs::SearchResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::com2009_msgs::SearchResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::com2009_msgs::SearchResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com2009_msgs::SearchResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com2009_msgs::SearchResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::com2009_msgs::SearchResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d70c4de9b794fcaee59b27f3888dd125";
  }

  static const char* value(const ::com2009_msgs::SearchResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd70c4de9b794fcaeULL;
  static const uint64_t static_value2 = 0xe59b27f3888dd125ULL;
};

template<class ContainerAllocator>
struct DataType< ::com2009_msgs::SearchResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "com2009_msgs/SearchResult";
  }

  static const char* value(const ::com2009_msgs::SearchResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::com2009_msgs::SearchResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result\n"
"float32 total_distance_travelled   # Total distance travelled during the action (meters)\n"
"float32 closest_object_distance    # LaserScan distance to the closest detected obstacle (meters) \n"
"float32 closest_object_angle       # The LaserScan angle of the closest detected obstacle (degrees)\n"
;
  }

  static const char* value(const ::com2009_msgs::SearchResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::com2009_msgs::SearchResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.total_distance_travelled);
      stream.next(m.closest_object_distance);
      stream.next(m.closest_object_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SearchResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::com2009_msgs::SearchResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::com2009_msgs::SearchResult_<ContainerAllocator>& v)
  {
    s << indent << "total_distance_travelled: ";
    Printer<float>::stream(s, indent + "  ", v.total_distance_travelled);
    s << indent << "closest_object_distance: ";
    Printer<float>::stream(s, indent + "  ", v.closest_object_distance);
    s << indent << "closest_object_angle: ";
    Printer<float>::stream(s, indent + "  ", v.closest_object_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COM2009_MSGS_MESSAGE_SEARCHRESULT_H
